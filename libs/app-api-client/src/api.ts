/* tslint:disable */
/* eslint-disable */
/**
 * @myorganizer/source
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface ConfirmResetPasswordBody
 */
export interface ConfirmResetPasswordBody {
  /**
   *
   * @type {string}
   * @memberof ConfirmResetPasswordBody
   */
  token: string;
  /**
   *
   * @type {string}
   * @memberof ConfirmResetPasswordBody
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof ConfirmResetPasswordBody
   */
  confirm_password: string;
}
/**
 *
 * @export
 * @interface FilteredUserInterface
 */
export interface FilteredUserInterface {
  /**
   *
   * @type {string}
   * @memberof FilteredUserInterface
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof FilteredUserInterface
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof FilteredUserInterface
   */
  email: string;
}
/**
 *
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
  /**
   *
   * @type {string}
   * @memberof Login200Response
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof Login200Response
   */
  status_code: number;
}
/**
 *
 * @export
 * @interface Logout200Response
 */
export interface Logout200Response {
  /**
   *
   * @type {string}
   * @memberof Logout200Response
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof Logout200Response
   */
  status: number;
}
/**
 *
 * @export
 * @interface RefreshToken200Response
 */
export interface RefreshToken200Response {
  /**
   *
   * @type {User}
   * @memberof RefreshToken200Response
   */
  user: User;
  /**
   *
   * @type {string}
   * @memberof RefreshToken200Response
   */
  message: string;
  /**
   *
   * @type {number}
   * @memberof RefreshToken200Response
   */
  status: number;
}
/**
 *
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
  /**
   *
   * @type {string}
   * @memberof RefreshTokenRequest
   */
  refresh_token: string;
}
/**
 *
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ResetPasswordRequest
   */
  email: string;
}
/**
 *
 * @export
 * @interface Todo
 */
export interface Todo {
  /**
   *
   * @type {number}
   * @memberof Todo
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Todo
   */
  todo: string;
  /**
   *
   * @type {string}
   * @memberof Todo
   */
  createdAt?: string;
}
/**
 *
 * @export
 * @interface TodoRequestBody
 */
export interface TodoRequestBody {
  /**
   *
   * @type {string}
   * @memberof TodoRequestBody
   */
  todo: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  reset_password_token?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email_verification_timestamp?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof User
   */
  blacklisted_tokens?: Array<string>;
}
/**
 *
 * @export
 * @interface UserCreationBody
 */
export interface UserCreationBody {
  /**
   *
   * @type {string}
   * @memberof UserCreationBody
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UserCreationBody
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserCreationBody
   */
  password: string;
}
/**
 *
 * @export
 * @interface UserLoginBody
 */
export interface UserLoginBody {
  /**
   *
   * @type {string}
   * @memberof UserLoginBody
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UserLoginBody
   */
  password: string;
}
/**
 *
 * @export
 * @interface ValidateErrorJSON
 */
export interface ValidateErrorJSON {
  /**
   *
   * @type {string}
   * @memberof ValidateErrorJSON
   */
  message: ValidateErrorJSONMessageEnum;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof ValidateErrorJSON
   */
  details: { [key: string]: any };
}

export const ValidateErrorJSONMessageEnum = {
  ValidationFailed: 'Validation failed',
} as const;

export type ValidateErrorJSONMessageEnum =
  (typeof ValidateErrorJSONMessageEnum)[keyof typeof ValidateErrorJSONMessageEnum];

/**
 *
 * @export
 * @interface VerifyEmailRequest
 */
export interface VerifyEmailRequest {
  /**
   *
   * @type {string}
   * @memberof VerifyEmailRequest
   */
  token: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {ConfirmResetPasswordBody} confirmResetPasswordBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmResetPassword: async (
      confirmResetPasswordBody: ConfirmResetPasswordBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'confirmResetPasswordBody' is not null or undefined
      assertParamExists(
        'confirmResetPassword',
        'confirmResetPasswordBody',
        confirmResetPasswordBody
      );
      const localVarPath = `/auth/password/reset/confirm`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        confirmResetPasswordBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UserCreationBody} userCreationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      userCreationBody: UserCreationBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreationBody' is not null or undefined
      assertParamExists('createUser', 'userCreationBody', userCreationBody);
      const localVarPath = `/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreationBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UserLoginBody} userLoginBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      userLoginBody: UserLoginBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userLoginBody' is not null or undefined
      assertParamExists('login', 'userLoginBody', userLoginBody);
      const localVarPath = `/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userLoginBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (
      userId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('logout', 'userId', userId);
      const localVarPath = `/auth/logout/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication jwt required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: async (
      refreshTokenRequest: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refreshTokenRequest' is not null or undefined
      assertParamExists(
        'refreshToken',
        'refreshTokenRequest',
        refreshTokenRequest
      );
      const localVarPath = `/auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendVerificationEmail: async (
      userId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('resendVerificationEmail', 'userId', userId);
      const localVarPath = `/auth/verify/resend/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication jwt required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ResetPasswordRequest} resetPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: async (
      resetPasswordRequest: ResetPasswordRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'resetPasswordRequest' is not null or undefined
      assertParamExists(
        'resetPassword',
        'resetPasswordRequest',
        resetPasswordRequest
      );
      const localVarPath = `/auth/password/reset`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resetPasswordRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {VerifyEmailRequest} verifyEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail: async (
      verifyEmailRequest: VerifyEmailRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'verifyEmailRequest' is not null or undefined
      assertParamExists(
        'verifyEmail',
        'verifyEmailRequest',
        verifyEmailRequest
      );
      const localVarPath = `/auth/verify/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        verifyEmailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {ConfirmResetPasswordBody} confirmResetPasswordBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirmResetPassword(
      confirmResetPasswordBody: ConfirmResetPasswordBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Logout200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.confirmResetPassword(
          confirmResetPasswordBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.confirmResetPassword']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UserCreationBody} userCreationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      userCreationBody: UserCreationBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        userCreationBody,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.createUser']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UserLoginBody} userLoginBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      userLoginBody: UserLoginBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Login200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        userLoginBody,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.login']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      userId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Logout200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(
        userId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.logout']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshTokenRequest} refreshTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refreshToken(
      refreshTokenRequest: RefreshTokenRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RefreshToken200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(
        refreshTokenRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.refreshToken']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resendVerificationEmail(
      userId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resendVerificationEmail(
          userId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.resendVerificationEmail']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ResetPasswordRequest} resetPasswordRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPassword(
      resetPasswordRequest: ResetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Logout200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(
        resetPasswordRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.resetPassword']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {VerifyEmailRequest} verifyEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async verifyEmail(
      verifyEmailRequest: VerifyEmailRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FilteredUserInterface>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmail(
        verifyEmailRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AuthenticationApi.verifyEmail']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     *
     * @param {AuthenticationApiConfirmResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmResetPassword(
      requestParameters: AuthenticationApiConfirmResetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Logout200Response> {
      return localVarFp
        .confirmResetPassword(
          requestParameters.confirmResetPasswordBody,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      requestParameters: AuthenticationApiCreateUserRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .createUser(requestParameters.userCreationBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      requestParameters: AuthenticationApiLoginRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Login200Response> {
      return localVarFp
        .login(requestParameters.userLoginBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(
      requestParameters: AuthenticationApiLogoutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Logout200Response> {
      return localVarFp
        .logout(requestParameters.userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(
      requestParameters: AuthenticationApiRefreshTokenRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<RefreshToken200Response> {
      return localVarFp
        .refreshToken(requestParameters.refreshTokenRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiResendVerificationEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendVerificationEmail(
      requestParameters: AuthenticationApiResendVerificationEmailRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .resendVerificationEmail(requestParameters.userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(
      requestParameters: AuthenticationApiResetPasswordRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Logout200Response> {
      return localVarFp
        .resetPassword(requestParameters.resetPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AuthenticationApiVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyEmail(
      requestParameters: AuthenticationApiVerifyEmailRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<FilteredUserInterface> {
      return localVarFp
        .verifyEmail(requestParameters.verifyEmailRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for confirmResetPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiConfirmResetPasswordRequest
 */
export interface AuthenticationApiConfirmResetPasswordRequest {
  /**
   *
   * @type {ConfirmResetPasswordBody}
   * @memberof AuthenticationApiConfirmResetPassword
   */
  readonly confirmResetPasswordBody: ConfirmResetPasswordBody;
}

/**
 * Request parameters for createUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateUserRequest
 */
export interface AuthenticationApiCreateUserRequest {
  /**
   *
   * @type {UserCreationBody}
   * @memberof AuthenticationApiCreateUser
   */
  readonly userCreationBody: UserCreationBody;
}

/**
 * Request parameters for login operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginRequest
 */
export interface AuthenticationApiLoginRequest {
  /**
   *
   * @type {UserLoginBody}
   * @memberof AuthenticationApiLogin
   */
  readonly userLoginBody: UserLoginBody;
}

/**
 * Request parameters for logout operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLogoutRequest
 */
export interface AuthenticationApiLogoutRequest {
  /**
   *
   * @type {string}
   * @memberof AuthenticationApiLogout
   */
  readonly userId: string;
}

/**
 * Request parameters for refreshToken operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRefreshTokenRequest
 */
export interface AuthenticationApiRefreshTokenRequest {
  /**
   *
   * @type {RefreshTokenRequest}
   * @memberof AuthenticationApiRefreshToken
   */
  readonly refreshTokenRequest: RefreshTokenRequest;
}

/**
 * Request parameters for resendVerificationEmail operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiResendVerificationEmailRequest
 */
export interface AuthenticationApiResendVerificationEmailRequest {
  /**
   *
   * @type {string}
   * @memberof AuthenticationApiResendVerificationEmail
   */
  readonly userId: string;
}

/**
 * Request parameters for resetPassword operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiResetPasswordRequest
 */
export interface AuthenticationApiResetPasswordRequest {
  /**
   *
   * @type {ResetPasswordRequest}
   * @memberof AuthenticationApiResetPassword
   */
  readonly resetPasswordRequest: ResetPasswordRequest;
}

/**
 * Request parameters for verifyEmail operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiVerifyEmailRequest
 */
export interface AuthenticationApiVerifyEmailRequest {
  /**
   *
   * @type {VerifyEmailRequest}
   * @memberof AuthenticationApiVerifyEmail
   */
  readonly verifyEmailRequest: VerifyEmailRequest;
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   *
   * @param {AuthenticationApiConfirmResetPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public confirmResetPassword(
    requestParameters: AuthenticationApiConfirmResetPasswordRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .confirmResetPassword(requestParameters.confirmResetPasswordBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public createUser(
    requestParameters: AuthenticationApiCreateUserRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .createUser(requestParameters.userCreationBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiLoginRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public login(
    requestParameters: AuthenticationApiLoginRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .login(requestParameters.userLoginBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiLogoutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public logout(
    requestParameters: AuthenticationApiLogoutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .logout(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiRefreshTokenRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public refreshToken(
    requestParameters: AuthenticationApiRefreshTokenRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .refreshToken(requestParameters.refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiResendVerificationEmailRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public resendVerificationEmail(
    requestParameters: AuthenticationApiResendVerificationEmailRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .resendVerificationEmail(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiResetPasswordRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public resetPassword(
    requestParameters: AuthenticationApiResetPasswordRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .resetPassword(requestParameters.resetPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AuthenticationApiVerifyEmailRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public verifyEmail(
    requestParameters: AuthenticationApiVerifyEmailRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AuthenticationApiFp(this.configuration)
      .verifyEmail(requestParameters.verifyEmailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TodoManagementApi - axios parameter creator
 * @export
 */
export const TodoManagementApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {TodoRequestBody} todoRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTodo: async (
      todoRequestBody: TodoRequestBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'todoRequestBody' is not null or undefined
      assertParamExists('createTodo', 'todoRequestBody', todoRequestBody);
      const localVarPath = `/todo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        todoRequestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} todoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTodo: async (
      todoId: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'todoId' is not null or undefined
      assertParamExists('deleteTodo', 'todoId', todoId);
      const localVarPath = `/todo/{todoId}`.replace(
        `{${'todoId'}}`,
        encodeURIComponent(String(todoId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTodos: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/todo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TodoManagementApi - functional programming interface
 * @export
 */
export const TodoManagementApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    TodoManagementApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {TodoRequestBody} todoRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTodo(
      todoRequestBody: TodoRequestBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Todo>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTodo(
        todoRequestBody,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoManagementApi.createTodo']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} todoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTodo(
      todoId: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodo(
        todoId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoManagementApi.deleteTodo']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllTodos(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Todo>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTodos(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['TodoManagementApi.getAllTodos']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TodoManagementApi - factory interface
 * @export
 */
export const TodoManagementApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TodoManagementApiFp(configuration);
  return {
    /**
     *
     * @param {TodoManagementApiCreateTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTodo(
      requestParameters: TodoManagementApiCreateTodoRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Todo> {
      return localVarFp
        .createTodo(requestParameters.todoRequestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TodoManagementApiDeleteTodoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTodo(
      requestParameters: TodoManagementApiDeleteTodoRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTodo(requestParameters.todoId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTodos(options?: RawAxiosRequestConfig): AxiosPromise<Array<Todo>> {
      return localVarFp
        .getAllTodos(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createTodo operation in TodoManagementApi.
 * @export
 * @interface TodoManagementApiCreateTodoRequest
 */
export interface TodoManagementApiCreateTodoRequest {
  /**
   *
   * @type {TodoRequestBody}
   * @memberof TodoManagementApiCreateTodo
   */
  readonly todoRequestBody: TodoRequestBody;
}

/**
 * Request parameters for deleteTodo operation in TodoManagementApi.
 * @export
 * @interface TodoManagementApiDeleteTodoRequest
 */
export interface TodoManagementApiDeleteTodoRequest {
  /**
   *
   * @type {number}
   * @memberof TodoManagementApiDeleteTodo
   */
  readonly todoId: number;
}

/**
 * TodoManagementApi - object-oriented interface
 * @export
 * @class TodoManagementApi
 * @extends {BaseAPI}
 */
export class TodoManagementApi extends BaseAPI {
  /**
   *
   * @param {TodoManagementApiCreateTodoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoManagementApi
   */
  public createTodo(
    requestParameters: TodoManagementApiCreateTodoRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TodoManagementApiFp(this.configuration)
      .createTodo(requestParameters.todoRequestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TodoManagementApiDeleteTodoRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoManagementApi
   */
  public deleteTodo(
    requestParameters: TodoManagementApiDeleteTodoRequest,
    options?: RawAxiosRequestConfig
  ) {
    return TodoManagementApiFp(this.configuration)
      .deleteTodo(requestParameters.todoId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TodoManagementApi
   */
  public getAllTodos(options?: RawAxiosRequestConfig) {
    return TodoManagementApiFp(this.configuration)
      .getAllTodos(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersManagementApi - axios parameter creator
 * @export
 */
export const UsersManagementApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {UserCreationBody} userCreationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (
      userCreationBody: UserCreationBody,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userCreationBody' is not null or undefined
      assertParamExists('createUser', 'userCreationBody', userCreationBody);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userCreationBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication jwt required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      userId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUserById', 'userId', userId);
      const localVarPath = `/user/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersManagementApi - functional programming interface
 * @export
 */
export const UsersManagementApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UsersManagementApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {UserCreationBody} userCreationBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(
      userCreationBody: UserCreationBody,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(
        userCreationBody,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersManagementApi.createUser']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllUsers(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersManagementApi.getAllUsers']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      userId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        userId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersManagementApi.getUserById']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersManagementApi - factory interface
 * @export
 */
export const UsersManagementApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersManagementApiFp(configuration);
  return {
    /**
     *
     * @param {UsersManagementApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(
      requestParameters: UsersManagementApiCreateUserRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .createUser(requestParameters.userCreationBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
      return localVarFp
        .getAllUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UsersManagementApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(
      requestParameters: UsersManagementApiGetUserByIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<User> {
      return localVarFp
        .getUserById(requestParameters.userId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for createUser operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiCreateUserRequest
 */
export interface UsersManagementApiCreateUserRequest {
  /**
   *
   * @type {UserCreationBody}
   * @memberof UsersManagementApiCreateUser
   */
  readonly userCreationBody: UserCreationBody;
}

/**
 * Request parameters for getUserById operation in UsersManagementApi.
 * @export
 * @interface UsersManagementApiGetUserByIdRequest
 */
export interface UsersManagementApiGetUserByIdRequest {
  /**
   *
   * @type {string}
   * @memberof UsersManagementApiGetUserById
   */
  readonly userId: string;
}

/**
 * UsersManagementApi - object-oriented interface
 * @export
 * @class UsersManagementApi
 * @extends {BaseAPI}
 */
export class UsersManagementApi extends BaseAPI {
  /**
   *
   * @param {UsersManagementApiCreateUserRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersManagementApi
   */
  public createUser(
    requestParameters: UsersManagementApiCreateUserRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersManagementApiFp(this.configuration)
      .createUser(requestParameters.userCreationBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersManagementApi
   */
  public getAllUsers(options?: RawAxiosRequestConfig) {
    return UsersManagementApiFp(this.configuration)
      .getAllUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UsersManagementApiGetUserByIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersManagementApi
   */
  public getUserById(
    requestParameters: UsersManagementApiGetUserByIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersManagementApiFp(this.configuration)
      .getUserById(requestParameters.userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
