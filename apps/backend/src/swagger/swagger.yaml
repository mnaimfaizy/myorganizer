openapi: 3.0.0
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas:
    User:
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        password:
          type: string
        reset_password_token:
          type: string
        email_verification_timestamp:
          type: string
          format: date-time
        blacklisted_tokens:
          items:
            type: string
          type: array
      required:
        - id
        - email
      type: object
      additionalProperties: false
    UserCreationBody:
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
      type: object
      additionalProperties: false
    Todo:
      properties:
        id:
          type: number
          format: double
        todo:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - todo
      type: object
      additionalProperties: false
    TodoRequestBody:
      properties:
        todo:
          type: string
      required:
        - todo
      type: object
      additionalProperties: false
  securitySchemes: {}
info:
  title: '@myorganizer/source'
  version: 0.0.0
  license:
    name: MIT
  contact: {}
paths:
  /user:
    get:
      operationId: GetAllUsers
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
      tags:
        - Users Management
      security: []
      parameters: []
    post:
      operationId: CreateUser
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - {}
      tags:
        - Users Management
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationBody'
  /user/{userId}:
    get:
      operationId: GetUserById
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                nullable: true
      tags:
        - Users Management
      security: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
  /todos:
    get:
      operationId: GetAllTodos
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Todo'
                type: array
      tags:
        - Todos Management
      security: []
      parameters: []
    post:
      operationId: CreateTodo
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
      tags:
        - Todos Management
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequestBody'
  /todos/{todoId}:
    delete:
      operationId: DeleteTodo
      responses:
        '204':
          description: No content
      tags:
        - Todos Management
      security: []
      parameters:
        - in: path
          name: todoId
          required: true
          schema:
            format: double
            type: number
servers:
  - url: /
